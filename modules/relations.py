import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
from google_sheets import load_sheet_to_df, filter_promo_data, get_logs_by_id
import io
import plotly.express as px
import calendar
import uuid
import json
from streamlit_javascript import st_javascript
from streamlit_echarts import st_echarts
from streamlit_echarts import JsCode
import difflib
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SPREADSHEET_ID = '1m7TE_YFLtf2opgral3YVr7SeJk2BSh7YXuWtEUDUcNY'
RANGE_NAME = '–°–≤–æ–¥–Ω—ã–π'
CREDENTIALS_PATH = 'credentials.json'
VALID_GEOS = ['RU', 'KZ', 'UA', 'CA', 'DE', 'AU', 'BR']
VALID_CATEGORIES = ['–ì–õ–ê–í–ù–ê–Ø','–ö–ê–¢–ï–ì–û–†–ò–Ø', '–ù–û–í–ò–ù–ö–ò']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
def get_unique_values(df, column):
    if df[column].empty:
        return []
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    all_values = ', '.join(df[column].dropna())
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
    values = [x.strip() for x in all_values.split(',')]
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    return sorted(list(set(x for x in values if x)))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π None
def get_unique_non_null_values(series):
    # –£–¥–∞–ª—è–µ–º None –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∑–∞—Ç–µ–º –±–µ—Ä–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ
    return sorted([x for x in series.unique() if pd.notna(x) and x != ''])

# –ö—ç—à–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(ttl=600)  # –ö—ç—à –Ω–∞ 1 —á–∞—Å
def load_data():
    try:
        df = load_sheet_to_df(SPREADSHEET_ID, RANGE_NAME, CREDENTIALS_PATH)
        # –ó–∞–º–µ–Ω—è–µ–º None –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ NaN
        df = df.replace({None: pd.NA, '': pd.NA})
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

def show_page():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if "logged_in" not in st.session_state or not st.session_state.logged_in:
        st.error("‚õî –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
        st.stop()
        
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –≤ —Å–∞–π–¥–±–∞—Ä
    with st.sidebar:
        st.title("‚öôÔ∏è –ú–µ–Ω—é")
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        st.markdown("---")
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        st.markdown("### üìã –†–∞–∑–¥–µ–ª—ã")
        tab_selected = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            ["–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤", "–õ–æ–≥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"],
            label_visibility="collapsed"
        )
        
        st.markdown("---")
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —Å–∞–π–¥–±–∞—Ä–∞ —Å CSS-—Å—Ç–∏–ª—è–º–∏
        exit_button_style = """
        <style>
        div[data-testid="stButton"] button {
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 0.5rem 1rem;
            width: 100%;
            margin-top: 20px;
        }
        div[data-testid="stButton"] button:hover {
            background-color: #c82333;
            color: black;
        }
        div[data-testid="stButton"] button:active {
            color: black;
        }
        </style>
        """
        st.markdown(exit_button_style, unsafe_allow_html=True)
        
        if st.button("üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"):
            st.session_state.logged_in = False
            st.session_state.auth_in_progress = False
            st.rerun()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    if tab_selected == "–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤":
        show_promo_tab()
    elif tab_selected == "–õ–æ–≥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π":
        show_reports_tab()
    elif tab_selected == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        show_settings_tab()

def show_promo_tab():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = load_data()

    if df is not None:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = get_unique_non_null_values(df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'])
            category = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', VALID_CATEGORIES)
            
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ö–ê–¢–ï–ì–û–†–ò–Ø, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            subcategory = None
            if category == '–ö–ê–¢–ï–ì–û–†–ò–Ø':
                subcategories = get_unique_non_null_values(df[df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == '–ö–ê–¢–ï–ì–û–†–ò–Ø']['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'])
                subcategory = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é', subcategories)
        
        with col2:
            # –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä)
            projects = get_unique_values(df[df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].isin(VALID_CATEGORIES)], '–ü—Ä–æ–µ–∫—Ç')
            selected_projects = st.multiselect(
                '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã',
                options=projects,
                help="–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è"
            )
            
            print(selected_projects)
            
            # –í—ã–±–æ—Ä –ì–ï–û
            geo = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –ì–ï–û', VALID_GEOS)
        
        with col3:
            # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
            st.write('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥')
            
            # –†–µ–∂–∏–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
            filter_mode_start = st.checkbox(
                '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ù–ê–ß–ê–õ–ê –ø–µ—Ä–∏–æ–¥–∞',
                help='–£—á–∏—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –¥–∞—Ç–æ–π "–°—Ç–∞—Ä—Ç –ø—Ä–æ–º–æ" —Ä–∞–≤–Ω–æ–π –¥–∞—Ç–µ "–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞"'
            )
            
            # –†–µ–∂–∏–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
            filter_mode_end = st.checkbox(
                '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ö–û–ù–¶–ê –ø–µ—Ä–∏–æ–¥–∞',
                help='–£—á–∏—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –¥–∞—Ç–æ–π "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–º–æ" —Ä–∞–≤–Ω–æ–π –¥–∞—Ç–µ "–ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞"'
            )
            
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            today = datetime.now()
            start_date = st.date_input(
                '–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞',
                value=today.replace(day=1)
            )
            end_date = st.date_input(
                '–ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞',
                value=(today.replace(day=1) + timedelta(days=32)).replace(day=1) - timedelta(days=1)
            )
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if st.button('–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã'):
            with st.spinner('–ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã...'):
                try:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                    if filter_mode_start and filter_mode_end:
                        st.info("üéØ –†–µ–∂–∏–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –ò –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã")
                    elif filter_mode_start and not filter_mode_end:
                        st.info("üìÖ –†–µ–∂–∏–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã")
                    elif not filter_mode_start and filter_mode_end:
                        st.info("üìÖ –†–µ–∂–∏–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã")
                    else:
                        st.info("üìä –†–µ–∂–∏–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤)")
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –Ω—É–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                    start_str = start_date.strftime('%d.%m.%Y')
                    end_str = end_date.strftime('%d.%m.%Y')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    filtered_df = filter_promo_data(
                        df,
                        start_date=start_str,
                        end_date=end_str,
                        category=category,
                        project=selected_projects,  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
                        geo=geo,
                        subcategory=subcategory,
                        exact_start_date=filter_mode_start,
                        exact_end_date=filter_mode_end
                    )
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    if not filtered_df.empty:
                        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ –ü–æ–∑–∏—Ü–∏—è
                        filtered_df = filtered_df.dropna(subset=['–ü–æ–∑–∏—Ü–∏—è'])
                        
                        if not filtered_df.empty:
                            st.write(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(filtered_df)}")
                            st.dataframe(
                                filtered_df,
                                use_container_width=True,
                                column_config={
                                    "–ü–æ–∑–∏—Ü–∏—è": st.column_config.NumberColumn(
                                        "–ü–æ–∑–∏—Ü–∏—è",
                                        help="–ü–æ–∑–∏—Ü–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ì–ï–û",
                                        format="%d"
                                    )
                                }
                            )
                        else:
                            st.warning('–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å')
                        # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è Excel —Ñ–∞–π–ª–∞
                        buffer = io.BytesIO()
                        with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
                            filtered_df.to_excel(writer, index=False, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')
                            
                        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        if st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å –∫–∞–∫ Excel",
                            data=buffer.getvalue(),
                            file_name=f"promo_filter_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                            mime="application/vnd.ms-excel"
                        ):
                            st.success('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!')
                    else:
                        st.warning('–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

def show_reports_tab():
    st.title("–õ–æ–≥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞)")
    refresh = st.button('üîÑ –û–±–Ω–æ–≤–∏—Ç—å')
    try:
        if refresh:
            with st.spinner('–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...'):
                if hasattr(get_logs_by_id, 'clear'):
                    get_logs_by_id.clear()
                logs_df = get_logs_by_id(SPREADSHEET_ID, CREDENTIALS_PATH)
        else:
            logs_df = get_logs_by_id(SPREADSHEET_ID, CREDENTIALS_PATH)
        if logs_df.empty:
            st.warning("–ù–µ—Ç –ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞.")
            return

        base_cell_names = [
            '–ì–æ–¥', '–°—Ç–∞—Ç—É—Å', '–ü—Ä–æ–≤–∞–π–¥–µ—Ä', '–ú–µ—Å—è—Ü', '–ü—Ä–æ–µ–∫—Ç', '–†–∞–∑–º–µ—â–µ–Ω–∏–µ', '–°—Ç–∞—Ä—Ç –ø—Ä–æ–º–æ', '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–º–æ',
            '–ò–≥—Ä–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ü–æ–∑–∏—Ü–∏—è', '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–°–∫–∏–¥–∫–∞', '–ü–§ (–∫–æ–º–ø)', '–ü–µ—Ä–∏–æ–¥ —Å–∫–∏–¥–∫–∏',
            'RU', 'KZ', 'UA', 'CA', 'DE', 'AU', 'BR', '–ì–µ–æ', '–ö–æ–º–º–µ–Ω–∞—Ç—Ä–∏–∏'
        ]

        for idx, row in logs_df.iterrows():
            date = row.get('–î–∞—Ç–∞', '')
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∫ —Ñ–æ—Ä–º–∞—Ç—É '–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º' –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            try:
                date_obj = pd.to_datetime(date)
                date = date_obj.strftime('%d.%m.%Y %H:%M')
            except Exception:
                pass
            user = row.get('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '')
            cell = row.get('–Ø—á–µ–π–∫–∞', '')
            old = str(row.get('–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', ''))
            new = str(row.get('–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', ''))

            old_cells = [x.strip() for x in old.split('|')]
            new_cells = [x.strip() for x in new.split('|')]

            max_len = max(len(old_cells), len(new_cells), len(base_cell_names))
            cell_names = base_cell_names + [''] * (max_len - len(base_cell_names))
            old_cells += [''] * (max_len - len(old_cells))
            new_cells += [''] * (max_len - len(new_cells))

            table_html = "<table style='width:100%;border-collapse:collapse;'>"
            # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏
            table_html += "<tr>"
            table_html += "<th style='padding:4px 8px;background:#23272f;color:#aaa;border-bottom:1px solid #333;font-size:0.95em'></th>"
            for name in cell_names:
                table_html += f"<th style='padding:4px 8px;background:#23272f;color:#aaa;border-bottom:1px solid #333;font-size:0.95em'>{name}</th>"
            table_html += "</tr>"
            # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            table_html += "<tr>"
            table_html += "<td style='background:#23272f;color:#aaa;font-weight:bold;text-align:right;padding:4px 8px;border-right:1px solid #333;'>–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</td>"
            for i, val in enumerate(old_cells):
                if val != new_cells[i]:
                    table_html += f"<td style='background:#ffb3b3;color:#111;padding:4px 8px;font-family:monospace;'>{val}</td>"
                else:
                    table_html += f"<td style='padding:4px 8px;font-family:monospace;color:#aaa'>{val}</td>"
            table_html += "</tr>"
            # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            table_html += "<tr>"
            table_html += "<td style='background:#23272f;color:#aaa;font-weight:bold;text-align:right;padding:4px 8px;border-right:1px solid #333;'>–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</td>"
            for i, val in enumerate(new_cells):
                if val != old_cells[i]:
                    table_html += f"<td style='background:#b3ffb3;color:#111;padding:4px 8px;font-family:monospace;'>{val}</td>"
                else:
                    table_html += f"<td style='padding:4px 8px;font-family:monospace;color:#aaa'>{val}</td>"
            table_html += "</tr>"
            table_html += "</table>"

            st.markdown(f"""
            <div style='background:#23272f;padding:1.2em 1.5em;margin-bottom:2em;border-radius:10px;border:2px solid #333;'>
                <div style='color:#aaa;font-size:0.95em;margin-bottom:0.2em;'>üïí <b>{date}</b> &nbsp; üë§ <b>{user}</b> &nbsp; <span style='color:#888'>–Ø—á–µ–π–∫–∞:</span> <b>{cell}</b></div>
                {table_html}
            </div>
            """, unsafe_allow_html=True)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤: {str(e)}")


def show_settings_tab():
    st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    st.info("–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ") 